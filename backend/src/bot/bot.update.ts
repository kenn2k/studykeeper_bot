import { BotService } from './bot.service';

import {
  Action,
  Command,
  Ctx,
  InjectBot,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Context, Markup, Telegraf } from 'telegraf';

@Update()
export class BotUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly botService: BotService,
  ) {}

  @Start()
  async start(ctx: Context) {
    await ctx.telegram.sendMessage(
      ctx.message.chat.id,
      `–ü—Ä–∏–≤—ñ—Ç, ${ctx.from.first_name}! üëã\n\n` +
        `–©–æ–± –ø–æ—á–∞—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –±–æ—Ç–æ–º, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /openApp.\n\n` +
        `‚ú® *–û—Å–Ω–æ–≤–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞:*\n\n` +
        `‚úÖ –ó—Ä—É—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–≤–¥–∞–Ω—å.\n\n` +
        `üìÖ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—É —É—Å—ñ—Ö –¥–æ–¥–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å —É –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ.\n\n` +
        `üöÄ –®–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.\n\n` +
        `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤–∞–∂–ª–∏–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –ø–æ–¥—ñ—ó.\n\n` +
        `–†–æ–∑–ø–æ—á–Ω—ñ—Ç—å –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º —á–∞—Å–æ–º –≤–∂–µ –∑–∞—Ä–∞–∑! üéØ`,
      { parse_mode: 'Markdown' },
    );
  }

  @Command('openApp')
  async setMenu(ctx: Context) {
    try {
      await ctx.setChatMenuButton({
        text: 'Open',
        type: 'web_app',
        web_app: { url: process.env.WEB_APP_URL },
      });
      await ctx.reply('Menu button has been set!');
    } catch (error) {
      console.error('Failed to set menu button:', error);
      await ctx.reply('Failed to set menu button.');
    }
  }

  @Action('plain')
  async plains(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.editMessageCaption(
      'Caption',
      Markup.inlineKeyboard([
        Markup.button.callback('Plain', 'plain'),
        Markup.button.callback('Italic', 'italic'),
      ]),
    );
  }

  @Command('button')
  async sendInitialMessage(@Ctx() ctx: Context) {
    await ctx.reply(
      'Initial Caption',
      Markup.inlineKeyboard([
        Markup.button.callback('Plain', 'plain'),
        Markup.button.callback('Italic', 'italic'),
      ]),
    );
  }
}
